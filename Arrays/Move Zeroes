"""Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array."""
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        no_of_zeroes = 0
        for i in range(len(nums)):
            if nums[i] == 0:
                no_of_zeroes += 1
        zeroes = [0] * no_of_zeroes
        j = 0
        while(j < len(nums)):
            if nums[j] == 0:
                nums.pop(j)
            else: j += 1
        nums+=zeroes
"""MOst efficient code
def moveZeroes(nums: List[int]):
    # Count the number of zeros
    zero_count = nums.count(0)

    # Remove all the zeros from the list
    nums = [num for num in nums if num != 0]

    # Append the required number of zeros at the end
    nums.extend([0] * zero_count)

    # Alternatively, you can also use the "+" operator for concatenation:
    # nums += [0] * zero_count

    return nums

# Example usage
nums = [0, 1, 0, 3, 12]
result = moveZeroes(nums)
print(result)  # Output: [1, 3, 12, 0, 0]
