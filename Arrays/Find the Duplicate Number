"""Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space."""
# Floyd algorith--tortoise-Hare
class Solution:
    def findDuplicate(self, nums: List[int]) -> int:
        slow = fast = nums[0]

        # Phase 1: Find the intersection point of the two pointers
        while True:
            slow = nums[slow]  # Move slow one step at a time
            fast = nums[nums[fast]]  # Move fast two steps at a time
            if slow == fast:  # Pointers meet at the intersection
                break

        # Phase 2: Find the duplicate number
        slow = nums[0]
        while slow != fast:
            slow = nums[slow]  # Move slow one step at a time
            fast = nums[fast]  # Move fast one step at a time

        return slow  # Return the duplicate number

